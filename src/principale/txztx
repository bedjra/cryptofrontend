
.dots {
  padding-top: 5px;
  display: flex;
  align-items: center;
  gap: 10px;
  padding-bottom: 15px;
}

.dot {
  width: 10px;
  height: 10px;
  background-color: #0073e6;
  border-radius: 50%;
}


span {
  color: rgb(31, 31, 31);
}

h6 {
  font-size: 16px;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
}

nav {
  position: fixed;
  left: 0;
  width: 220px;
  height: 100%;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  padding: 1rem;
  border: 1px solid #d3d3d3;
  z-index: 999;
  text-decoration: none;
}

.nav-links {
  list-style-type: none;
}

.nav-links li {
  margin-bottom: 30px;
}

.nav-links li:last-child {
  margin-bottom: 0;
}

.nav-links a {
  margin-top: 20px;
  text-decoration: none;
  display: flex;
  align-items: center;
  color: #0b0b0b;
  font-size: 15px;
  padding: 10px 15px;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

.nav-links a .icon {
  margin-right: 10px;
  font-size: 1.1rem;
  color: #0b0b0b;
}

.nav-links a.active span {
  color: white;
  /* Span text color for the active link */
}

.nav-links a.active {
  background-color: #d3d3d3;
  color: #555;
}

.nav-links a.active .icon {
  color: #0c0c0c;
  /* Text and icon color for the active link */
}

.log_out {
  position: absolute;
  bottom: -0.3%;
}

.log_out span {
  color: rgb(245, 59, 59);
}



.nav-links li:hover .sub-menu {
  display: block;
}








.content-area {
  flex: 1;
  /* Prend tout l'espace restant */
  margin-left: 230px;
  padding: 10px;
  transition: margin-left 0.3s ease;
  height: 100vh;
  /* Hauteur complète de l'écran */

}

.headerNew {
  border: 1px solid #d3d3d3;
  border-radius: 5px;
  flex: 1;
  /* Prend tout l'espace restant */
  margin-top: 5px;

  position: fixed;
  /* Fixe le header en haut */
  top: 0;
  left: 245px;
  width: calc(100% - 260px);
  /* Ajuste la largeur pour éviter qu'il dépasse */
  height: 60px;
  /* Hauteur du header */
  background: #fff;
  /* Fond du header */
  display: flex;
  align-items: center;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
  /* Ombre subtile */

  align-items: center;
  justify-content: space-between;
  /* Sépare la barre de recherche et l'icône */
  padding: 0 20px;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
  z-index: 1000;
  /* Assure qu'il est au-dessus du contenu */
}

.routage {
  flex: 1;
  /* Prend l’espace restant */
  overflow-y: auto;
  /* Permet le défilement si le contenu dépasse */
  height: calc(100vh - 60px);
  /* Ajuste la hauteur en fonction du header */

  border: 1px solid #d3d3d3;
  border-radius: 5px;
  padding-right: 55px;
  margin-top: 70px;
  flex: 1;
  /* Prend tout l'espace restant */
  height: 800px;
  transition: margin-left 0.3s ease;
}


.search-bar {
  flex: 1;
  /* Prend tout l'espace possible */
  max-width: 300px;
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 14px;
  outline: none;
}

.profile-icon {

  width: 50px;
  height: 50px;
  border-radius: 50%;
  overflow: hidden;
  border: 2px solid #ccc;
  /* Ajoute un encadrement */
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f9f9f9;
  cursor: pointer;
}

.profile-icon img {
  cursor: pointer;
  pointer-events: auto;
  width: 45px;
  height: 45px;
}







/* Responsive styles */
/* Responsive styles */
/* Pour les grands écrans (plus de 1200px de large) */
@media (min-width: 1200px) {
  .inge {
    display: none;
  }

}

/* Pour les petits écrans (moins de 768px de large) */
@media (max-width: 768px) {
  .sideba {
    display: none;
  }




  .content-area {
    margin-left: -3px;
    padding: 10px;
    transition: margin-left 0.3s ease;
    height: 100vh;
    /* Hauteur complète de l'écran */

  }

  .headerNew {
    border: 1px solid #d3d3d3;
    border-radius: 5px;
    flex: 1;
    /* Prend tout l'espace restant */
    margin-top: 5px;

    position: fixed;
    /* Fixe le header en haut */
    top: 0;
    left: 10px;
    width: 95%;
    height: 60px;
    background: #fff;
    display: flex;
    align-items: center;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    /* Ombre subtile */

    align-items: center;
    justify-content: space-between;
    /* Sépare la barre de recherche et l'icône */
    padding: 0 20px;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    /* Assure qu'il est au-dessus du contenu */
  }

  .routage {
    flex: 1;
    /* Prend l’espace restant */
    overflow-y: auto;
    /* Permet le défilement si le contenu dépasse */
    height: calc(100vh - 60px);
    /* Ajuste la hauteur en fonction du header */

    border: 1px solid #d3d3d3;
    border-radius: 5px;
    padding-right: 55px;
    margin-top: 70px;
    flex: 1;
    /* Prend tout l'espace restant */
    height: 800px;
    transition: margin-left 0.3s ease;
  }

  .inge {
    height: 45px;
    position: absolute;
    left: 5px;
    top: 50%;
    transform: translateY(-50%);
    margin-right: 10px;
  }


  .search-bar {
    flex: 1px;
    left: 150px;
    max-width: 300px;
    padding: 5px 12px;
    border-radius: 20px;
    font-size: 14px;
    outline: none;
  }


  .search-container  {
    margin-left: 90px;
  }

  .profile-icon {

    width: 50px;
    height: 50px;
    border-radius: 50%;
    overflow: hidden;
    border: 2px solid #ccc;
    margin-right: -15px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f9f9f9;
    cursor: pointer;
  }

  .profile-icon img {
    cursor: pointer;
    pointer-events: auto;
    width: 45px;
    height: 45px;
  }



}


  






















































import React, { useState, useEffect } from 'react';
import { Outlet, NavLink } from 'react-router-dom';
import { FaTachometerAlt, FaExchangeAlt, FaTruck, FaUsers, FaHistory, FaCalculator, FaSignOutAlt } from "react-icons/fa";
import "./Principale.css";
import { useNavigate } from "react-router-dom";
import { FaSearch, FaUserCircle } from "react-icons/fa"; // Icônes de recherche et profil

const Principale = () => {
  const [isNavOpen, setIsNavOpen] = useState(false); // Le menu est fermé par défaut
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const navigate = useNavigate();
  const [searchActive, setSearchActive] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  // Fonction pour basculer l'état du menu
  const toggleNav = () => {
    console.log('toggleNav called');
    setIsNavOpen(!isNavOpen);
  };

  // Ferme le menu si on clique sur un lien (uniquement sur mobile)
  const closeNav = () => {
    console.log('closeNav called');
    if (isMobile) setIsNavOpen(false);
  };

  // Met à jour l'état de isMobile si la taille de l'écran change
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener("resize", handleResize);

    // Force la fermeture du menu si on charge sur mobile
    console.log('isMobile:', isMobile);
    if (isMobile) {
      console.log('Menu should be closed on mobile');
      setIsNavOpen(false);
    }

    return () => window.removeEventListener("resize", handleResize);
  }, [isMobile]); // On ajoute [isMobile] comme dépendance pour s'assurer que l'effet se met à jour lorsque la taille de l'écran change

  console.log('isNavOpen:', isNavOpen); // Vérifier la valeur actuelle de isNavOpen


  // Fonction pour rediriger vers la page Parametre
  const goToParametre = () => {
    navigate("/profil");
  };

  return (
    <div className="debut">

      <div className="wrappe">

        <nav className={`sideba ${isNavOpen ? "open" : ""}`}>

          <div className="dots">
            <span className="dot"></span>
            <span className="dot"></span>
            <span className="dot"></span>
            <h6>Crypto</h6>
          </div>

          <ul className="nav-links">
            <li>
              <NavLink to="accueil" className={({ isActive }) => (isActive ? "active" : "")} onClick={closeNav}>
                <FaTachometerAlt className="icon" />
                <span className="links_name">Accueil</span>
              </NavLink>
            </li>
            <li>
              <NavLink to="transactions" className={({ isActive }) => (isActive ? "active" : "")} onClick={closeNav}>
                <FaExchangeAlt className="icon" />
                <span className="links_name">Transactions</span>
              </NavLink>
            </li>
            <li>
              <NavLink to="fournisseurs" className={({ isActive }) => (isActive ? "active" : "")} onClick={closeNav}>
                <FaTruck className="icon" />
                <span className="links_name">Fournisseurs</span>
              </NavLink>
            </li>

            <li>
              <NavLink to="calculs" className={({ isActive }) => (isActive ? "active" : "")} onClick={closeNav}>
                <FaCalculator className="icon" />
                <span className="links_name">Calculs</span>
              </NavLink>
            </li>

            <li>
              <NavLink to="historique" className={({ isActive }) => (isActive ? "active" : "")} onClick={closeNav}>
                <FaHistory className="icon" />
                <span className="links_name">Historique</span>
              </NavLink>
            </li>

            <li className="log_out">
              <NavLink to="/" className={({ isActive }) => (isActive ? "active" : "")} onClick={closeNav}>
                <FaSignOutAlt className="icon" />
                <span className="links_name">Déconnexion</span>
              </NavLink>
            </li>
          </ul>
        </nav>

        <div className="content-area">
          <div className="headerNew">
          <img className='inge' src="/menu.png" alt="Menu" onClick={toggleNav} />

            <div className={`search-container ${searchActive ? "active" : ""}`}>
              {!searchActive ? (
                <div className="search-placeholder" onClick={() => setSearchActive(true)}>
                  <FaSearch className="search-icon" />
                  &nbsp;&nbsp; <span className="search-text">Recherche</span>
                </div>
              ) : (
                <input
                  type="text"
                  className="search-bar"
                  placeholder="Rechercher..."
                  value={searchValue}
                  onChange={(e) => setSearchValue(e.target.value)}
                  onBlur={() => setSearchActive(false)} // Cache l'input si on clique ailleurs
                  autoFocus
                />
              )}

            </div>
            <div className="profile-icon">
              <img src="/profil.png" alt="Profile" onClick={goToParametre} style={{ cursor: "pointer" }} />
            </div>
          </div>

          <div className="routage">

            {/**  
            <Outlet />
          */}
          </div>

        </div>
      </div>

      
    </div>

    
  );
};

export default Principale;
