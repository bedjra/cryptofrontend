
import "./Beneficiaires.css";
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Trash2, Edit, DollarSign, Eye } from "lucide-react";
import { format } from "date-fns";

const apiUrl = "http://127.0.0.1:5000";

const Beneficiaires = () => {



  const [fournisseursSelectionnes, setFournisseursSelectionnes] = useState([]);

  const toggleDropdown = (index) => {
    setFournisseursSelectionnes(prev =>
      prev.map((f, i) => i === index ? { ...f, isOpen: !f.isOpen } : f)
    );
  };

  const toggleFournisseurSelection = (index, fournisseur) => {
    setFournisseursSelectionnes(prev => prev.map((f, i) => {
      if (i === index) {

        const noms = f.noms.includes(fournisseur.id)
          ? f.noms.filter(n => n !== fournisseur.id)
          : [...f.noms, fournisseur.id];

        return { ...f, noms };

      }
      return f;
    }));
  };


  const [montantFCFA, setMontantFCFA] = useState("");
  const [tauxConv, setTauxConv] = useState("");
  const [montantUSDT, setMontantUSDT] = useState("");
  const [transactions, setTransactions] = useState([]);
  const [editingTransactionId, setEditingTransactionId] = useState(null);
  const [fournisseurs, setFournisseurs] = useState([]);
  const [selectedFournisseur, setSelectedFournisseur] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [selectedFournisseurDetails, setSelectedFournisseurDetails] = useState(null);


  const handleShowDetails = async (transactionId) => {
    try {
      const response = await fetch(`http://localhost:5000/trans/${transactionId}`);
      const data = await response.json();
      setSelectedFournisseurDetails(data);
      setShowModal(true);
    } catch (error) {
      console.error("Erreur lors de la récupération des détails:", error);
    }
  };


  // Récupération des transactions
  useEffect(() => {
    axios
      .get(`${apiUrl}/trans/alll`)
      .then((response) => {
        setTransactions(response.data.transactions || []);
      })
      .catch((error) => {
        console.error("Erreur lors de la récupération des transactions:", error);
      });
  }, []);

  // Récupération des fournisseurs
  useEffect(() => {
    axios
      .get(`${apiUrl}/all/fourn`)
      .then((response) => {
        setFournisseurs(response.data.fournisseurs || []);
      })
      .catch((error) => {
        console.error("Erreur lors de la récupération des fournisseurs:", error);
      });
  }, []);

  useEffect(() => {
    if (montantFCFA && tauxConv) {
      const montant = parseFloat(montantFCFA) / parseFloat(tauxConv);
      setMontantUSDT(montant.toFixed(3)); // Arrondi à 3 décimales
    } else {
      setMontantUSDT("");
    }
  }, [montantFCFA, tauxConv]);

  const handleEnregistrer = async () => {
    if (!montantFCFA || !tauxConv || fournisseursSelectionnes.length === 0) return;

    try {

      const transactionData = {
        montantFCFA: parseFloat(montantFCFA),
        tauxConv: parseFloat(tauxConv),
        fournisseurs: fournisseursIds // ✅ Liste des IDs corrigée
      };


      let response;
      if (editingTransactionId) {
        response = await axios.put(`${apiUrl}/trans/update/${editingTransactionId}`, transactionData);
        setTransactions(transactions.map(t => (t.id === editingTransactionId ? response.data.transaction : t)));
      } else {
        response = await axios.post(`${apiUrl}/trans/addd`, transactionData);
        setTransactions([...transactions, response.data.transaction]);
      }

      console.log("Données envoyées :", transactionData);

      // Réinitialisation des champs
      setMontantFCFA("");
      setTauxConv("");
      setMontantUSDT("");
      setFournisseursSelectionnes([]);
      setEditingTransactionId(null);
    } catch (error) {
      console.error("Erreur lors de l'enregistrement de la transaction:", error.response ? error.response.data : error);
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`${apiUrl}/trans/delete/${id}`);
      setTransactions(transactions.filter((transaction) => transaction.id !== id));
    } catch (error) {
      console.error("Erreur lors de la suppression de la transaction:", error);
    }
  };


  const handleEdit = (transaction) => {
    setMontantFCFA(transaction.montantFCFA);
    setTauxConv(transaction.tauxConv);
    setEditingTransactionId(transaction.id);

    // Mettre à jour les fournisseurs sélectionnés
    if (transaction.fournisseurs) {
      setFournisseursSelectionnes(transaction.fournisseurs.map(f => ({ noms: [f.nom], isOpen: false })));
    } else {
      setFournisseursSelectionnes([]);
    }
  };


  const fournisseursIds = fournisseursSelectionnes.flatMap(f =>
    f.noms.map(nom => {
      const fournisseurTrouve = fournisseurs.find(fourn => fourn.nom === nom);
      return fournisseurTrouve ? fournisseurTrouve.id : null;
    }).filter(id => id !== null)
  );


  return (
    <div className="container">
      <div className="left-box">
        <h4>{editingTransactionId ? "Modifier" : "Ajouter"} une Transaction</h4>
        <div className="input-group">
          <span>Montant FCFA</span>
          <input type="number" value={montantFCFA} onChange={(e) => setMontantFCFA(e.target.value)} required />
        </div>
        <div className="input-group">
          <span>Taux Convenu</span>
          <input type="number" value={tauxConv} onChange={(e) => setTauxConv(e.target.value)} required />
        </div>


        {/* Sélecteur de fournisseur */}
        {fournisseursSelectionnes.map((fournisseur, index) => (
          <div key={index} className="input-group">

            {/* En-tête avec le numéro du fournisseur et boutons d'ajout/suppression */}
            <div className="input-header">
              <span>Fournisseur </span>


            </div>

            {/* Pseudo-Select qui agit comme un dropdown */}
            <div className="custom-select">
              <div className="selected" onClick={() => toggleDropdown(index)}>
                {fournisseur.noms.length > 0 ? fournisseur.noms.join(", ") : "Sélectionner un Fournisseur"}
              </div>
              {fournisseur.isOpen && (
                <div className="dropdown">
                  {fournisseurs.map(f => (
                    <label key={f.id} className="dropdown-item">
                      <input
                        type="checkbox"
                        checked={fournisseur.noms.includes(f.nom)}
                        onChange={() => toggleFournisseurSelection(index, f)}
                      />
                      {f.nom}
                    </label>
                  ))}
                </div>
              )}
            </div>
          </div>
        ))}





        {tauxConv && (
          <div affichage>
            {montantFCFA} montant Fcfa =
            <br />
            <p className="mont">
              {montantUSDT} <DollarSign className="icon-dollar" />
            </p>
          </div>
        )}








        <div className="but">
          <button className="save" onClick={handleEnregistrer}>
            {editingTransactionId ? "Modifier" : "Enregistrer"}
          </button>
        </div>
      </div>

      <div className="right-box">
        <h4 style={{ marginBottom: 25 }}>Gestion des Transactions</h4>
        <table>
          <thead>
            <tr>
              <th>Id</th>
              <th>Mtt FCFA</th>
              <th>Taux</th>
              <th>Mtt USDT</th>
              <th>Date</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {transactions.map((transaction) => {
              // Trouver le fournisseur correspondant à la transaction
              const fournisseur = fournisseurs.find(f => f.id === transaction.fournisseur?.id);

              return (
                <tr key={transaction.id}>
                  <td>{transaction.id}</td>
                  <td>{transaction.montantFCFA}</td>
                  <td>{transaction.tauxConv}</td>
                  <td>{transaction.montantUSDT}</td>
                  <td>
                    {transaction.dateTransaction
                      ? format(new Date(transaction.dateTransaction), "dd/MM/yyyy")
                      : "Date invalide"}
                  </td>
                  <td>
                    <button onClick={() => handleEdit(transaction)} className="action-btn">
                      <Edit size={20} color="blue" />
                    </button>
                    <button onClick={() => handleDelete(transaction.id)} className="action-btn">
                      <Trash2 size={20} color="red" />
                    </button>
                    <button
                      onClick={() => handleShowDetails(transaction.id)}
                      className="action-btn"
                    >
                      <Eye size={21} color="green" />
                    </button>

                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>

        {/* Affichage de la modale */}
        {/* Affichage de la modale */}
        {showModal && selectedFournisseurDetails && (
          <div className="overlay" onClick={() => setShowModal(false)}>
            <div className="content" onClick={(e) => e.stopPropagation()}>
              <div className="popup-content-header">
                <h4>Détails de la Transaction</h4>
              </div>

              <div className="popup-body">
                <div className="details-container">
                  <div className="column">
                    <h5>Transaction</h5>
                    <p><strong>Montant FCFA:</strong> {selectedFournisseurDetails.montantFCFA}</p>
                    <p><strong>Taux Convenu:</strong> {selectedFournisseurDetails.tauxConv}</p>
                    <p><strong>Montant USDT:</strong> {selectedFournisseurDetails.montantUSDT}</p>
                    <p><strong>Date:</strong> {format(new Date(selectedFournisseurDetails.dateTransaction), "dd/MM/yyyy")}</p>
                  </div>
                </div>

                {selectedFournisseurDetails.fournisseurs?.length > 0 && (
                  <div className="fournisseurs">
                    <h5>Fournisseurs</h5>
                    {selectedFournisseurDetails.fournisseurs.map((fournisseur, index) => (
                      <div key={index} className="fournisseur">
                        <p><strong>Nom:</strong> {fournisseur.nom}</p>

                        {fournisseur.beneficiaires.length > 0 && (
                          <div className="beneficiaires">
                            <h5>Bénéficiaires</h5>
                            {fournisseur.beneficiaires.map((b, idx) => (
                              <div key={idx} className="beneficiaire">
                                <p><strong>Nom:</strong> {b.nom}</p>
                                <p><strong>Commission (USDT):</strong> {b.commissionUSDT}</p>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                )}

                <button className="close-btn" onClick={() => setShowModal(false)}>
                  Fermer
                </button>
              </div>
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default Beneficiaires;
