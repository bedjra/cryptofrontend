import "./Fournisseurs.css";
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Trash2, Edit, Eye } from "lucide-react";

const apiUrl = "http://127.0.0.1:5000";

const Fournisseurs = () => {
  const [nomFournisseur, setNomFournisseur] = useState("");
  const [tauxJour, setTauxJour] = useState("");
  const [quantiteDisponible, setQuantiteDisponible] = useState("");
  const [transactionId, setTransactionId] = useState("");
  const [fournisseurs, setFournisseurs] = useState([]);
  const [editingFournisseurId, setEditingFournisseurId] = useState(null);
  const [beneficiaires, setBeneficiaires] = useState([
    { nom: "", commission_USDT: "" },
  ]);
  const [selectedFournisseur, setSelectedFournisseur] = useState(null); // State for selected fournisseur

  useEffect(() => {
    axios
      .get(`${apiUrl}/all/four`)
      .then((response) => {
        setFournisseurs(response.data.fournisseurs || []);
        console.log(
          "Fournisseurs récupérés avec succès",
          response.data.fournisseurs
        );
      })
      .catch((error) => {
        console.error(
          "Erreur lors de la récupération des fournisseurs:",
          error
        );
      });
  }, []);

  const handleEnregistrer = async () => {
    if (!nomFournisseur || !tauxJour || !quantiteDisponible || !transactionId)
      return;

    try {
      if (editingFournisseurId) {
        const response = await axios.put(
          `${apiUrl}/update/four/${editingFournisseurId}`,
          {
            nom: nomFournisseur,
            taux_jour: tauxJour,
            quantite_USDT: quantiteDisponible,
            transaction_id: transactionId,
          }
        );
        console.log(
          "Fournisseur modifié avec succès",
          response.data.fournisseur
        );

        setFournisseurs(
          fournisseurs.map((fournisseur) =>
            fournisseur.id === editingFournisseurId
              ? response.data.fournisseur
              : fournisseur
          )
        );
      } else {
        const response = await axios.post(`${apiUrl}/add/four`, {
          nom: nomFournisseur,
          taux_jour: tauxJour,
          quantite_USDT: quantiteDisponible,
          transaction_id: transactionId,
        });
        console.log(
          "Fournisseur ajouté avec succès",
          response.data.fournisseur
        );
        alert("Fournisseur ajouté avec succès !");
        setFournisseurs([...fournisseurs, response.data.fournisseur]);
      }

      setNomFournisseur("");
      setTauxJour("");
      setQuantiteDisponible("");
      setTransactionId("");
      setEditingFournisseurId(null);
    } catch (error) {
      console.error("Erreur lors de l'enregistrement du fournisseur:", error);
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`${apiUrl}/delete/four/${id}`);
      console.log("Fournisseur supprimé avec succès, ID:", id);
      setFournisseurs(
        fournisseurs.filter((fournisseur) => fournisseur.id !== id)
      );
    } catch (error) {
      console.error("Erreur lors de la suppression du fournisseur:", error);
    }
  };

  const handleEdit = (fournisseur) => {
    setNomFournisseur(fournisseur.nom);
    setTauxJour(fournisseur.taux_jour);
    setQuantiteDisponible(fournisseur.quantite_USDT);
    setTransactionId(fournisseur.transaction_id);
    setEditingFournisseurId(fournisseur.id);
    console.log("Modification du fournisseur en cours:", fournisseur);
  };

  // Fetch and display details of a supplier
  const handleShowDetails = async (id) => {
    try {
      const response = await axios.get(`${apiUrl}/four/${id}`);
      setSelectedFournisseur(response.data.fournisseur);
    } catch (error) {
      console.error("Erreur lors de la récupération des détails du fournisseur:", error);
    }
  };

  const handleClosePopup = () => {
    setSelectedFournisseur(null); // Close the popup
  };

  const handleBeneficiaireChange = (index, e) => {
    const updatedBeneficiaires = [...beneficiaires];
    updatedBeneficiaires[index][e.target.name] = e.target.value;
    setBeneficiaires(updatedBeneficiaires);
  };

  const addBeneficiaire = () => {
    setBeneficiaires([...beneficiaires, { nom: "", commission_USDT: "" }]);
  };

  const removeBeneficiaire = (index) => {
    const updatedBeneficiaires = beneficiaires.filter((_, i) => i !== index);
    setBeneficiaires(updatedBeneficiaires);
  };

  return (
    <div className="container">
      <div className="left-box">
        <h2>{editingFournisseurId ? "Modifier" : "Ajouter"} un Fournisseur</h2>
        <div className="input-group">
          <label>Nom du Fournisseur</label>
          <input
            type="text"
            value={nomFournisseur}
            onChange={(e) => setNomFournisseur(e.target.value)}
            required
          />
        </div>
        <div className="input-group">
          <label>Taux du Jour (FCFA/USDT)</label>
          <input
            type="number"
            value={tauxJour}
            onChange={(e) => setTauxJour(e.target.value)}
            required
          />
        </div>
        <div className="input-group">
          <label>Quantité Disponible (USDT)</label>
          <input
            type="number"
            value={quantiteDisponible}
            onChange={(e) => setQuantiteDisponible(e.target.value)}
            required
          />
        </div>
        <div className="input-group">
          <label>ID de Transaction</label>
          <input
            type="text"
            value={transactionId}
            onChange={(e) => setTransactionId(e.target.value)}
            required
          />
        </div>
        {/* Section des bénéficiaires */}
        <div className="input-group beneficiaires-row">
          <h3>Bénéficiaires</h3>
          <a className="a" onClick={addBeneficiaire}>
            ➕ 
          </a>
        </div>
        {beneficiaires.map((beneficiaire, index) => (
          <div key={index} className="beneficiaire-row">
            <input
              type="text"
              name="nom"
              placeholder="Nom"
              value={beneficiaire.nom}
              onChange={(e) => handleBeneficiaireChange(index, e)}
              required
            />
            <input
              type="number"
              name="commission_USDT"
              placeholder="Commission USDT"
              value={beneficiaire.commission_USDT}
              onChange={(e) => handleBeneficiaireChange(index, e)}
              required
            />
            {index > 0 && (
              <a className="b delete-icon" onClick={() => removeBeneficiaire(index)}>
                ❌
              </a>
            )}
          </div>
        ))}{" "}
        <div className="button-group">
          <button className="btn" onClick={handleEnregistrer}>
            {editingFournisseurId ? "MODIFIER" : "ENREGISTRER"}
          </button>
        </div>
      </div>

      {/* Gestion des Fournisseurs */}
      <div className="right-box">
        <h2>Gestion des Fournisseurs</h2>
        <table>
          <thead>
            <tr>
              <th>ID</th>
              <th>Nom du Fournisseur</th>
              <th>Taux du Jour</th>
              <th>Quantité</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {fournisseurs.map((fournisseur) => (
              <tr key={fournisseur.id}>
                <td>{fournisseur.id}</td>
                <td>{fournisseur.nom}</td>
                <td>{fournisseur.taux_jour}</td>
                <td>{fournisseur.quantite_USDT}</td>
                <td>
                  <button onClick={() => handleEdit(fournisseur)} className="action-btn">
                    <Edit size={20} color="blue" />
                  </button>
                  <button onClick={() => handleDelete(fournisseur.id)} className="action-btn">
                    <Trash2 size={20} color="red" />
                  </button>
                  <button onClick={() => handleShowDetails(fournisseur.id)} className="action-btn">
                    <Eye size={20} color="green" />
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Popup Détails */}
        {selectedFournisseur && (
          <div className="popup-overlay">
            <div className="popup-content">
              <h2>Détails du Fournisseur</h2>
              <p><strong>ID:</strong> {selectedFournisseur.id}</p>
              <p><strong>Nom:</strong> {selectedFournisseur.nom}</p>
              <p><strong>Taux du Jour:</strong> {selectedFournisseur.taux_jour}</p>
              <p><strong>Quantité Disponible:</strong> {selectedFournisseur.quantite_USDT}</p>
              <p><strong>ID Transaction:</strong> {selectedFournisseur.transaction_id}</p>
              <button onClick={handleClosePopup}>Fermer</button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Fournisseurs;
