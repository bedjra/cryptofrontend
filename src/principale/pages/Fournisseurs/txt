  /*  <select
            multiple
            value={transactionIds}
            onChange={(e) => {
              const selectedOptions = Array.from(e.target.selectedOptions, (option) => option.value);
              setTransactionIds(selectedOptions);
            }}
          >


const [transactionIds, setTransactionIds] = useState([]);



*/
import "./Fournisseurs.css";
import React, { useState, useEffect } from "react";
import axios from "axios";
import { Trash2, Edit, Eye } from "lucide-react";

const apiUrl = "http://127.0.0.1:5000";

const Fournisseurs = () => {
  const [nomFournisseur, setNomFournisseur] = useState("");
  const [tauxJour, setTauxJour] = useState("");
  const [quantiteDisponible, setQuantiteDisponible] = useState("");
  const [transactionIds, setTransactionIds] = useState([]);
  const [fournisseurs, setFournisseurs] = useState([]);
  const [editingFournisseurId, setEditingFournisseurId] = useState(null);
  const [transactions, setTransactions] = useState([]);
  const [beneficiaires, setBeneficiaires] = useState([{ nom: "", commission_USDT: "" }]);

  useEffect(() => {
    axios.get(`${apiUrl}/all/four`)
      .then(response => setFournisseurs(response.data.fournisseurs || []))
      .catch(error => console.error("Erreur lors de la récupération des fournisseurs:", error));
  }, []);

  useEffect(() => {
    axios.get(`${apiUrl}/trans/mont`)
      .then(response => setTransactions(response.data.transactions))
      .catch(error => console.error("Erreur lors de la récupération des transactions:", error));
  }, []);

  const handleEnregistrer = async () => {
    if (!nomFournisseur || !tauxJour || !quantiteDisponible || transactionIds.length === 0) {
      alert("Veuillez remplir tous les champs avant de continuer.");
      return;
    }

    for (let b of beneficiaires) {
      if (!b.nom.trim() || !b.commission_USDT.toString().trim()) {
        alert("Veuillez remplir tous les champs des bénéficiaires.");
        return;
      }
    }

    const fournisseurData = {
      nom: nomFournisseur.trim(),
      taux_jour: tauxJour.toString().trim(),
      quantite_USDT: quantiteDisponible.toString().trim(),
      transaction_id: transactionIds,
      beneficiaires: beneficiaires.map(b => ({
        nom: b.nom.trim(),
        commission_USDT: b.commission_USDT.toString().trim()
      }))
    };

    try {
      let response;
      if (editingFournisseurId) {
        response = await axios.put(`${apiUrl}/update/four/${editingFournisseurId}`, fournisseurData);
        setFournisseurs(fournisseurs.map(f => (f.id === editingFournisseurId ? response.data.fournisseur : f)));
      } else {
        response = await axios.post(`${apiUrl}/add/four`, fournisseurData);
        setFournisseurs([...fournisseurs, response.data.fournisseur]);
      }

      alert("Fournisseur enregistré avec succès !");
      setNomFournisseur("");
      setTauxJour("");
      setQuantiteDisponible("");
      setTransactionIds([]);
      setBeneficiaires([{ nom: "", commission_USDT: "" }]);
      setEditingFournisseurId(null);
    } catch (error) {
      console.error("Erreur lors de l'enregistrement du fournisseur:", error);
      alert("Une erreur est survenue. Veuillez réessayer.");
    }
  };

  const handleDelete = async (id) => {
    if (!window.confirm("Voulez-vous vraiment supprimer ce fournisseur ?")) return;

    try {
      await axios.delete(`${apiUrl}/delete/four/${id}`);
      setFournisseurs(fournisseurs.filter(f => f.id !== id));
      alert("Fournisseur supprimé avec succès !");
    } catch (error) {
      console.error("Erreur lors de la suppression du fournisseur:", error);
      alert("Erreur lors de la suppression !");
    }
  };

  const handleEdit = (fournisseur) => {
    setNomFournisseur(fournisseur.nom);
    setTauxJour(fournisseur.taux_jour.toString());
    setQuantiteDisponible(fournisseur.quantite_USDT.toString());
    setTransactionIds(fournisseur.transaction_id || []);
    setEditingFournisseurId(fournisseur.id);
    setBeneficiaires(fournisseur.beneficiaires || [{ nom: "", commission_USDT: "" }]);
  };

  const handleBeneficiaireChange = (index, e) => {
    const updatedBeneficiaires = [...beneficiaires];
    updatedBeneficiaires[index][e.target.name] = e.target.value;
    setBeneficiaires(updatedBeneficiaires);
  };

  const addBeneficiaire = () => setBeneficiaires([...beneficiaires, { nom: "", commission_USDT: "" }]);
  const removeBeneficiaire = (index) => setBeneficiaires(beneficiaires.filter((_, i) => i !== index));

  return (
    <div className="container">
      <h4>{editingFournisseurId ? "Modifier" : "Ajouter"} un Fournisseur</h4>
      <input type="text" placeholder="Nom du Fournisseur" value={nomFournisseur} onChange={(e) => setNomFournisseur(e.target.value)} required />
      <input type="number" placeholder="Taux du Jour" value={tauxJour} onChange={(e) => setTauxJour(e.target.value)} required />
      <input type="number" placeholder="Quantité Disponible" value={quantiteDisponible} onChange={(e) => setQuantiteDisponible(e.target.value)} required />
      <select multiple value={transactionIds} onChange={(e) => setTransactionIds(Array.from(e.target.selectedOptions, option => option.value))}>
        <option value="" disabled>-- Sélectionner des transactions --</option>
        {transactions.map(t => (<option key={t.id} value={t.id}>{`Id: ${t.id} - ${t.montantFCFA} FCFA`}</option>))}
      </select>
      <button onClick={handleEnregistrer}>{editingFournisseurId ? "Modifier" : "Enregistrer"}</button>
    </div>
  );
};

export default Fournisseurs;
